### syntax versino of docker compose I'm using (to be honest I haven't seen a difference in any of the 3.# syntax's for what I'm doing)
version: "3.6"

# list of services running
# Docker has a default DNS that will resolve docker containers's by their service name for other docker containers
# I use this in the Ngninx config a lot
services:

  ###
  #  I personally don't use portainer.  I have liked making my own docker compose file instead. But I have it here to show how it would
  #  be set up for those who prefer it.
  ###
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    ports:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${GHS_DIR}/docker/portainer/data:/data
      - ${GHS_DIR}/shared:/shared
    environment:
      - TZ=${TZ}
    networks:
      - docker_lan

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${GHS_DIR}/docker/heimdall/config:/config
    ports:
      - 80
    restart: unless-stopped
    networks:
      - docker_lan

  watchtower:
    container_name: watchtower
    restart: unless-stopped
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    #This will update once a week at 4am on sunday 
    command: --schedule "0 0 4 * * SUN" --cleanup
    networks:
      - docker_lan
    depends_on:
      - oauth
      - jellyfin
      - filebrowser
      - heimdall
      - portainer
      - nginx-glad_hs
      - openvpn

#https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md
  openvpn:
    cap_add:
     - NET_ADMIN
    image: kylemanna/openvpn:latest
    container_name: openvpn
    ports:
     - "1194:1194/udp"
    restart: unless-stopped
    volumes:
     - ./openvpn-data/conf:/etc/openvpn
    healthcheck:
      test: curl --fail -s http://localhost:1194/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
      - docker_lan

  ###
  #  Simple light weight application to view, add, and edit documents remotely.
  ###
  filebrowser:
    container_name: filebrowser
    hostname: filebrowser
    restart: unless-stopped
    image: filebrowser/filebrowser:latest

    ###
    #  I have authentication turned off because I have it behind google oauth and don't mind having a single user profile
    ###
    command: [
      "--noauth"
    ]
    environment:
      - FB_NOAUTH=noauth
      - FB_BRANDING.DISABLEEXTERNAL=true
    ports:
      - 80
    volumes:
      - ${GHS_DIR}/fb_data/hosted_docs:/files
      - ${GHS_DIR}/fb_config/fb_database.db:/database.db
      - ${GHS_DIR}/fb_data/fb_logs.log:/fb_logs.log
      - ${GHS_DIR}/fb_config/filebrowser.json:/.filebrowser.json
    networks:
      - docker_lan

  ###
  #  Media Server
  #   - If you don't have a good graphics card for hardware acceleration I suggest trying to format movies in
  #     a .mp4 with H.264 8 bit video encoding and AAC audio, it is the most universally supported format
  #
  #  There are two jellyfin images used widely.  jellyfin/jellyfin and linuxserver/jellyfin
  #  I have decided to use linuxserver/jellyfin for the reason it is supposed to support
  #  hardware acceleration for Intel graphics where as jellyfin/jellyfin does not.  
  #
  #  I found that the commented sections can be useful if jellyfin is not dockerised, but a but overally complicated for me when running on
  #  a reverse proxy.
  ###
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional - Set the autodiscovery response domain or IP address.
    volumes:
      - ${GHS_DIR}/jellyfin/config:/config
      ### 
      # Media files for jellyfin are hosted on the filebrowser directories so that 
      # my family and friends can upload their own media easily.
      ###
      - ${GHS_DIR}/fb_data/hosted_docs/jellyfin/tv_shows:/data/tvshows
      - ${GHS_DIR}/fb_data/hosted_docs/jellyfin/movies:/data/movies
    ports:
      - 8096
      # - 8920:8920 #optional - Https webUI (you need to set up your own certificate).
      # - 7359:7359/udp #optional - Allows clients to discover Jellyfin on the local network.
      # - 1900:1900/udp #optional - Service discovery used by DNLA and clients.
    restart: unless-stopped
    networks:
      - docker_lan

  vaultwarden:
    container_name: vaultwarden
    hostname: vaultwarden
    restart: unless-stopped
    image: vaultwarden/server:latest
    # For explanations of environemnt variables see: https://github.com/dani-garcia/vaultwarden/blob/main/.env.template
    environment:
      ### This environment variable disables forced https (this is because I have it hidden within local docker netowrk
      #   behind a reverse proxy that is forced https)
      - WEBSOCKET_ENABLED=true

      ###
      # Gmail has a free SMTP server (up to 500 or 1,000 per day).  It is easy to look up how to set up your credentials.
      ###
      - SMTP_HOST=${SMTP_DOMAIN}
      - SMTP_FROM=${SMTP_EMAIL}
      - SMTP_FROM_NAME=VaultWarden 
      - SMTP_PORT=587 
      - SMTP_SECURITY=starttls
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TIMEOUT=30
      - LOGIN_RATELIMIT_SECONDS=60
      - LOGIN_RATELIMIT_MAX_BURST=10
      - ADMIN_RATELIMIT_SECONDS=300
      - ADMIN_RATELIMIT_MAX_BURST=3
      - INVITATIONS_ALLOWED=true
      - INVITATION_ORG_NAME=Vaultwarden
      - ADMIN_TOKEN=${VW_ADMIN_TOKEN}
      - SIGNUPS_ALLOWED=true
      - SIGNUPS_VERIFY=true
      - SIGNUPS_VERIFY_RESEND_TIME=60
      - SIGNUPS_VERIFY_RESEND_LIMIT=6
      - DISABLE_ADMIN_TOKEN=false
      - SHOW_PASSWORD_HINT=false
      ### This should be the domain used for your vaultwarden.  It is what is used for links in emails that vault warden deploys
      - DOMAIN=https://vaultwarden.${GHS_BASE_DOMAIN}
    volumes:
      - ${GHS_DIR}/vw_data:/data
    ports:
      - 80
    networks:
      - docker_lan
    
  nginx-glad_hs:
    container_name: nginx-glad_hs
    hostname: nginx-glad_hs
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    security_opt:
      - no-new-privileges:true
    volumes:
      ### 
      #   - Basic nginx.conf file file that looks for servers defined in conf.d directory
      #   - Conf.d directory containers servers for each application desired
      #         - Titled ###-title name,  servers are spun up in alphabitcal order, numbers let you organise in desired order easily
      #   - Conf_templates - Files that are used as includes in servers defined in con.d directory to clean up each servers definition
      ###
      - ${GHS_DIR}/nginx_config/nginx.conf:/etc/nginx/nginx.conf
      - ${GHS_DIR}/nginx_config/conf.d:/etc/nginx/conf.d
      - ${GHS_DIR}/nginx_config/conf_templates:/etc/nginx/conf_templates

      ### TLS certificates
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /tmp/acme_challenge:/tmp/acme_challenge
      - ~/.acme.sh:/cert_info
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - docker_lan
      - oauth2-proxy-network
    restart: unless-stopped
    ###
    #   I read that docker containers created after nginx is running are not resolved correctly.  For this reason I make nginx dependent on
    #   applications that need to be resolved by nginx
    ###
    depends_on:
      - oauth
      - jellyfin
      - filebrowser
      - heimdall
      - portainer
      - vaultwarden
  
  ###
  #  Used for google oauth2.  I have it set up as an authentication method for each of my exposed applications.
  #
  #  I used a combination of the following to sites to figure out the configuration for the bitnami/oauth2-proxy service and
  #  the nginx oauth authentication call back
  #       See:  https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/
  #       See:  https://github.com/bitly/oauth2_proxy
  ###
  oauth:
    image: "bitnami/oauth2-proxy:latest"
    container_name: oauth
    hostname: oauth
    ports:
      - 8080
      - 4180
    security_opt:
      - no-new-privileges:true
    volumes:
      - "${GHS_DIR}/oauth:/config"
      - ~/.acme.sh:/cert_info
    command: [
      "--config=/config/oauth2_proxy.cfg"
    ]
    networks:
      - oauth2-proxy-network
    restart: unless-stopped

###
# 2 networks:
#     1) Docker_lan: default network ment for most docker containers to talk to each other
#     2) oauth2-proxy-network: Used for nginx and oauth2 to seperate authentication services from standard docker containers for a bit
#        more security
###
networks:
  docker_lan:
    driver: bridge    
  oauth2-proxy-network:
    driver: bridge